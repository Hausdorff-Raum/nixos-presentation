#+STARTUP: inlineimages
#+title: A tour on NixOS
#+author: Marcos Benevides (mtrsk.github.io)

* Introduction

#+BEGIN_QUOTE
I mean, if 10 years from now, when you are doing something quick and dirty, you
suddenly visualize that I am looking over your shoulders and say to yourself
"Dijkstra would not have liked this", well, that would be enough immortality for
me.

Edsger W. Dijkstra
#+END_QUOTE

** Key ideas
+ Dependencies are Graphs!
  #+Begin_SRC shell
    nix-store --query --graph $(readlink -f $(which python)) > python.dot
    dot -Tps python.dot -o python.pdf
  #+END_SRC

#+ATTR_ORG: :width 700
[[./images/closure.png]]

+ Somehow, we'be been failing to represent then as such, or been doing that implicitly.
+ Nix makes it explicit.

** How build packages from source
  #+BEGIN_SRC shell
    tar -xf source.tar.gz
    cd source
    ./configure --prefix=$HOME/.mypath
    make
    make install
  #+END_SRC

** Nix Ecosystem
| Name    | What it does                                                                                 |
|---------+----------------------------------------------------------------------------------------------|
| Nix     | A lazy, untyped, functional programming language. Built to write declarative configurations. |
| NixOS   | A Linux distribution managed by Nix                                                          |
| Nixpkgs | A place where Nix users place their meta-packages                                            |

* Nix Store


#+ATTR_ORG: :width 500
[[./images/memes_00.jpg]]

** Properties
+ ~/nix/store/~ is a Graph
+ ~/nix/store/*~ are the *immutable* nodes of that Graph

  #+BEGIN_SRC shell
    dirname $(readlink -f $(which nvim))
    /nix/store/40vcicw0v28v6bvl18nqa1ldq9v80m27-neovim-0.7.2/bin
  #+END_SRC

** Nodes

#+ATTR_ORG: :width 500
[[./images/dolstra_nix_store.png]]

** Generations

#+ATTR_ORG: :width 500
[[./images/user_environments.png]]


* Nix Expression Language
** Properties
+ Reproducible
+ Composable

** Characteristics
+ DSL
+ Purelly Functional
+ Dynamically Typed
+ Lazy

** Derivations
+ Derivations are a declarative way to write content in the ~/nix/store/~.

*** Example

#+BEGIN_SRC nix
  { pkgs ? import <nixpkgs> {} }:

  let
    version = "2.12";
  in
  pkgs.stdenv.mkDerivation {
    name = "hello-${version}";
    src = pkgs.fetchurl {
      url = "https://mirror.cedia.org.ec/gnu/hello/hello-${version}.tar.gz";
      sha256 = "1ayhp9v4m4rdhjmnl2bq3cibrbqqkgjbl3s7yk2nhlh8vj3ay16g";
    };
    doCheck = true;
  }
#+END_SRC

*** Building

Building using the old (non-Flakes) way.

#+BEGIN_SRC shell
  nix-build hello.nix
#+END_SRC

** Flakes
+ It's basically a lockfile for your derivation
+ Since it's a Nix lang feature now, it can also be applied to your system
  * YES, you can have a lockfile to our entire system

* Nixpkgs
#+ATTR_ORG: :width 500
[[./images/memes_01.jpg]]

* NixOS
NixOS is a Linux distribution where all packages are built and managed
declaratively by Nix.

** Properties
+ System rollbacks are a built-in abstraction, simply provided by Nix, if
  combined with a version control system (like Git), then it can be also made
  immutable and [[https://r13y.com/][fully reproducible]].
+ Is both:
  * Source-based & Binary caches
  * Rolling release & not rolling release

** Core Ideas
If one analyzes Eelco's ideas from 2004 and the current DevOps ecosystem, the
following can be noticed:
- [X] Sanboxing is now popular
  * We still we have to convice most of the DevOps world that reproducibility is
    a must.
- [X] Infra as code is also getting popular
  * But we managed to get the entire DevOps world to use crap like YAML,
    everything still sucks
  * Nix is also not the coolest language around, but at least is a real language
- [ ] License compliance is a real thing, mostly ignored by developers
- [ ] Reproducible development enviroments

Even if Nix never becomes mainstream, it has the right fundamentals.

* References

There's an amazing tutorial about AWS + NixOS on [[https://typeclasses.com/nix][Type Classes]].

+ Videos
  * [[https://www.youtube.com/watch?v=6iVXaqUfHi4][Nix: What Even is it Though]]
  * [[https://www.youtube.com/watch?v=t6goF1dM3ag][Armijn Hemel - The History of NixOS]]
  * [[https://www.youtube.com/watch?v=fsgYVi2PQr0][The dark and murky past of NixOS (NixCon 2019)]]
+ Documentation
  * [[https://nixos.org/guides/nix-pills/][Nix Pills]] (old)
  * [[https://nix.dev/][Nix Dev]]
+ Communities
  * [[https://t.me/nixosbrasil][NixOS Brasil (Telegram)]]
